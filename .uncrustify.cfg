# Uncrustify-0.66.1

###
### 参考
###  http://uncrustify.sourceforge.net/default.cfg
###

newlines                                            = lf        # auto/lf/crlf/cr               | 改行コード
input_tab_size                                      = 4         # unsigned number               | 入力ファイルのタブサイズ
output_tab_size                                     = 4         # unsigned number               | 出力ファイルのタブサイズ （align_with_tabs=true時のみ）
string_escape_char                                  = 92        # unsigned number               | エスケープASCIIコード（10進数）通常:92(\) Pawn言語:94(^)
string_escape_char2                                 = 0         # unsigned number               | Pawn言語用エスケープ文字（クォーテーション文字直前でのみ有効）
string_replace_tab_chars                            = false     # false/true                    | 文字列中のタブ文字を'\t'に置換する
tok_split_gte                                       = false     # false/true                    | '>=','>>='を'void f(list<list<B>>=val);'のテンプレートの一部と認識させる
disable_processing_cmt                              = ""        # string                        | [En] Override the default ' *INDENT-OFF*' in comments for disabling processing of part of the file.
enable_processing_cmt                               = ""        # string                        | [En] Override the default ' *INDENT-ON*' in comments for enabling processing of part of the file.
enable_digraphs                                     = false     # false/true                    | [En] Enable parsing of digraphs. Default=False.
utf8_bom                                            = remove    # ignore/add/remove/force       | UTF-8ファイルにBOMコード追加
utf8_byte                                           = false     # false/true                    | ファイルに128〜255のバイトコードを含む場合UTF-8で出力する
utf8_force                                          = true      # false/true                    | 出力ファイルを強制的にUTF-8で出力する
sp_arith                                            = force     # ignore/add/remove/force       | 算術演算子'+','-','/','*','>>>','<<','>>','%','|'の前後に空白を挿入/削除する
sp_arith_additive                                   = force     # ignore/add/remove/force       | 算術演算子'+','-'の前後に空白を挿入/削除する ※sp_arithよりも優先
sp_assign                                           = force     # ignore/add/remove/force       | 代入演算子'=','+='の前後に空白を挿入/削除する
sp_cpp_lambda_assign                                = remove    # ignore/add/remove/force       | (C++11言語)ラムダ式の'='の前後に空白を挿入/削除する ※sp_assignよりも優先
sp_cpp_lambda_paren                                 = remove    # ignore/add/remove/force       | (C++11言語)ラムダ式のキャプチャ(外部変数)の前後に空白を挿入/削除する
sp_assign_default                                   = remove    # ignore/add/remove/force       | オペレータオーバーライドの'='の前後に空白を挿入/削除する
sp_before_assign                                    = ignore    # ignore/add/remove/force       | オペレータオーバーライドの'=','=+',etcの前に空白を挿入/削除する
sp_after_assign                                     = ignore    # ignore/add/remove/force       | オペレータオーバーライドの'=','=+',etcの後に空白を挿入/削除する
sp_enum_paren                                       = ignore    # ignore/add/remove/force       | 'NS_ENUM ('の空白を挿入/削除する
sp_enum_assign                                      = force     # ignore/add/remove/force       | 'enum'中の'='の前後に空白を挿入/削除する
sp_enum_before_assign                               = ignore    # ignore/add/remove/force       | 'enum'中の'='の前に空白を挿入/削除する ※sp_enum_assignよりも優先
sp_enum_after_assign                                = ignore    # ignore/add/remove/force       | 'enum'中の'='の後に空白を挿入/削除する ※sp_enum_assignよりも優先
sp_enum_colon                                       = ignore    # ignore/add/remove/force       | 'enum'中の':'の前後に空白を挿入/削除する
sp_pp_concat                                        = remove    # ignore/add/remove/force       | プリプロセッサの連結演算子'##'の前後に空白を挿入/削除する
sp_pp_stringify                                     = remove    # ignore/add/remove/force       | プリプロセッサの展開演算子'#'の前後に空白を挿入/削除する ('#@'にも影響)
sp_before_pp_stringify                              = remove    # ignore/add/remove/force       | プリプロセッサの展開演算子'#'の前後に空白を挿入/削除する ('#define x(y) L#y'中)
sp_bool                                             = remove    # ignore/add/remove/force       | ブーリアン演算子'&&','||'前後へ空白を挿入/削除する
sp_compare                                          = force     # ignore/add/remove/force       | 比較演算子'<','>','=='前後へ空白を挿入/削除する
sp_inside_paren                                     = remove    # ignore/add/remove/force       | 丸括弧'(',')'の間の空白を挿入/削除する
sp_paren_paren                                      = remove    # ignore/add/remove/force       | 連続する丸括弧の間へ空白を挿入/削除する ※'((' <-> '( ('
sp_cparen_oparen                                    = remove    # ignore/add/remove/force       | 連続する丸括弧の間へ空白を挿入/削除する ※')(' <-> ') ('
sp_balance_nested_parens                            = false     # false/true                    | 入れ子の丸括弧中の空白にバランスをとるか
sp_paren_brace                                      = force     # ignore/add/remove/force       | ')'と'{'の間に空白を挿入/削除する
sp_before_ptr_star                                  = remove    # ignore/add/remove/force       | ポインタ'*'の前に空白を挿入/削除する
sp_before_unnamed_ptr_star                          = ignore    # ignore/add/remove/force       | ポインタ'*'の前に空白を挿入/削除する ※(*)の後ろに変数名が続かない場合 ※ignoreの場合sp_before_ptr_starが有効
sp_between_ptr_star                                 = ignore    # ignore/add/remove/force       | ポインタ'*'が連続する場合(*)の間に空白を挿入/削除する : '**' <-> '* *'
sp_after_ptr_star                                   = force     # ignore/add/remove/force       | ポインタ'*'の後に空白を挿入/削除する
sp_after_ptr_star_qualifier                         = force     # ignore/add/remove/force       | ポインタ'*'の後に空白を挿入/削除する ※修飾子が続く場合
sp_after_ptr_star_func                              = force     # ignore/add/remove/force       | ポインタ'*'の後に空白を挿入/削除する ※関数定義（プロトタイプ/実装）が続く場合
sp_ptr_star_paren                                   = remove    # ignore/add/remove/force       | ポインタ'*'の後に空白を挿入/削除する ※関数定義の'('が続く場合
sp_before_ptr_star_func                             = remove    # ignore/add/remove/force       | ポインタ'*'の前に空白を挿入/削除する ※関数定義（プロトタイプ/実装）が続く場合
sp_before_byref                                     = remove    # ignore/add/remove/force       | 参照'&'の前に空白を挿入/削除する
sp_before_unnamed_byref                             = ignore    # ignore/add/remove/force       | 参照'&'の前に空白を挿入/削除する ※(*)の後ろに変数名が続かない場合 ※ignoreの場合sp_before_ptr_starが有効
sp_after_byref                                      = force     # ignore/add/remove/force       | 参照'&'の後に空白を挿入/削除する
sp_after_byref_func                                 = force     # ignore/add/remove/force       | 参照'&'の後に空白を挿入/削除する ※関数定義（プロトタイプ/実装）が続く場合
sp_before_byref_func                                = ignore    # ignore/add/remove/force       | 参照'&'の後に空白を挿入/削除する ※関数定義（プロトタイプ/実装）が続く場合
sp_after_type                                       = force     # ignore/add/remove/force       | 定義の前に空白を挿入/削除する
sp_before_template_paren                            = remove    # ignore/add/remove/force       | (D言語)括弧の前に挿入/削除する ※'template Foo('と'class Foo('の場合
sp_template_angle                                   = force     # ignore/add/remove/force       | 'template'と'<'の間に空白を挿入/削除する ※'template <' <-> 'template<'
sp_before_angle                                     = force     # ignore/add/remove/force       | 山括弧'<>'の前に空白を挿入/削除する
sp_inside_angle                                     = remove    # ignore/add/remove/force       | 山括弧'<','>'の間の空白を挿入/削除する
sp_angle_colon                                      = ignore    # ignore/add/remove/force       | 山括弧'<>'とコロン':'の間の空白を挿入/削除する
sp_after_angle                                      = force     # ignore/add/remove/force       | '<>'の後に空白を挿入/削除する
sp_angle_paren                                      = remove    # ignore/add/remove/force       | 'new List<byte>(foo);'のような場合の'<>'と'('の間に空白を挿入/削除する
sp_angle_paren_empty                                = remove    # ignore/add/remove/force       | 'new List<byte>();'のような場合の'<>'と'('の間に空白を挿入/削除する
sp_angle_word                                       = remove    # ignore/add/remove/force       | 'List<byte> m;','template <typename T> static ...'のような場合の'<>'と単語の間に空白を 挿入/削除 する.
sp_angle_shift                                      = force     # ignore/add/remove/force       | (C++/C#言語(template中))山括弧'>'が連続する場合(>)の間に空白を挿入/削除する ※'>>' <-> '> >'
sp_permit_cpp11_shift                               = false     # false/true                    | (C++11言語)             山括弧'>'が連続する場合(>)の間に空白を削除する      ※'>>'  -> '> >'
sp_before_sparen                                    = force     # ignore/add/remove/force       | 'if','for','switch','while',etcの'('の前に空白を挿入/削除する
sp_inside_sparen                                    = remove    # ignore/add/remove/force       | 'if'の丸括弧'(',')'の間の空白を挿入/削除する
sp_inside_sparen_close                              = ignore    # ignore/add/remove/force       | 'if'の丸括弧')'の前の空白を挿入/削除する ※sp_inside_sparenよりも優先
sp_inside_sparen_open                               = ignore    # ignore/add/remove/force       | 'if'の丸括弧'('の後の空白を挿入/削除する ※sp_inside_sparenよりも優先
sp_after_sparen                                     = force     # ignore/add/remove/force       | 'if','for','switch','while',etcの')'の後に空白を挿入/削除する
sp_sparen_brace                                     = force     # ignore/add/remove/force       | 'if','for','switch','while',etcの')'と'{'の間に空白を挿入/削除する
sp_invariant_paren                                  = remove    # ignore/add/remove/force       | (D言語)'invariant'と'('の間に空白を挿入/削除する
sp_after_invariant_paren                            = ignore    # ignore/add/remove/force       | (D言語)'invariant (C) c'と')'の間に空白を挿入/削除する
sp_special_semi                                     = remove    # ignore/add/remove/force       | 'if','for','while'の空文の';'の前に空白を挿入/削除する
sp_before_semi                                      = remove    # ignore/add/remove/force       | ';'の前に空白を挿入/削除する
sp_before_semi_for                                  = remove    # ignore/add/remove/force       | 空文でない'for(;;)'文の';'の前に空白を挿入/削除する
sp_before_semi_for_empty                            = remove    # ignore/add/remove/force       | 'for(;;)'文の空パートの';'の前に空白を挿入/削除する
sp_after_semi                                       = force     # ignore/add/remove/force       | ';'の後に空白を挿入/削除する ※後ろにコメントが続かない場合
sp_after_semi_for                                   = force     # ignore/add/remove/force       | 空文でない'for(;;)'文の';'の後に空白を挿入/削除する
sp_after_semi_for_empty                             = ignore    # ignore/add/remove/force       | 'for(;;)'文の空パートの最後の';'の後に空白を挿入/削除する ※'for ( ; ; <here> )'<-here部分
sp_before_square                                    = remove    # ignore/add/remove/force       | 角括弧'[' の前に空白を挿入/削除する ('[]'は除く)
sp_before_squares                                   = remove    # ignore/add/remove/force       | 角括弧'[]'の前に空白を挿入/削除する
sp_inside_square                                    = remove    # ignore/add/remove/force       | 角括弧'[',']'の間の空白を挿入/削除する
sp_after_comma                                      = force     # ignore/add/remove/force       | ','の後に空白を挿入/削除する ※'a,b' <-> 'a, b'
sp_before_comma                                     = remove    # ignore/add/remove/force       | ','の前に空白を挿入/削除する
sp_after_mdatype_commas                             = ignore    # ignore/add/remove/force       |
sp_before_mdatype_commas                            = ignore    # ignore/add/remove/force       |
sp_between_mdatype_commas                           = ignore    # ignore/add/remove/force       |
sp_paren_comma                                      = remove    # ignore/add/remove/force       |
sp_before_ellipsis                                  = force     # ignore/add/remove/force       |
sp_after_class_colon                                = force     # ignore/add/remove/force       |
sp_before_class_colon                               = force     # ignore/add/remove/force       |
sp_after_constr_colon                               = ignore    # ignore/add/remove/force       |
sp_before_constr_colon                              = ignore    # ignore/add/remove/force       |
sp_before_case_colon                                = force     # ignore/add/remove/force       |
sp_after_operator                                   = ignore    # ignore/add/remove/force   ?   | 'operator'と記号との間に空白を 挿入/削除 する.
sp_after_operator_sym                               = ignore    # ignore/add/remove/force   ?   |
sp_after_operator_sym_empty                         = ignore    # ignore/add/remove/force       |
sp_after_cast                                       = remove    # ignore/add/remove/force       | (キャスト)の後に空白を 挿入/削除 する.
sp_inside_paren_cast                                = remove    # ignore/add/remove/force       | (キャスト)の丸括弧対の内側に空白を 挿入/削除 する.
sp_cpp_cast_paren                                   = remove    # ignore/add/remove/force       |
sp_sizeof_paren                                     = remove    # ignore/add/remove/force       | sizeof と '(' の間に空白を 挿入/削除 する.
sp_after_tag                                        = ignore    # ignore/add/remove/force   ?   | (Pawn)タグキーワードの後に空白を 挿入/削除 する.
sp_inside_braces_enum                               = force     # ignore/add/remove/force       | enum の '{' と '}' の内側に空白を 挿入/削除 する.
sp_inside_braces_struct                             = force     # ignore/add/remove/force       | struct/union の '{' と '}' の内側に空白を 挿入/削除 する.
sp_after_type_brace_init_lst_open                   = ignore    # ignore/add/remove/force       |
sp_before_type_brace_init_lst_close                 = ignore    # ignore/add/remove/force       |
sp_inside_type_brace_init_lst                       = ignore    # ignore/add/remove/force       |
sp_inside_braces                                    = force     # ignore/add/remove/force       | '{' と '}' の内側に空白を 挿入/削除 する.
sp_inside_braces_empty                              = remove    # ignore/add/remove/force       |
sp_type_func                                        = force     # ignore/add/remove/force       | 関数名と返値型との間に空白を 挿入/削除 する. ポインタ*等の記号が入らない場合は最低1文字は空白が入る.
sp_type_brace_init_lst                              = ignore    # ignore/add/remove/force       |
sp_func_proto_paren                                 = remove    # ignore/add/remove/force       | 関数(プロトタイプ)宣言での関数名と'('の間に空白を 挿入/削除 する.
sp_func_proto_paren_empty                           = ignore    # ignore/add/remove/force       |
sp_func_def_paren                                   = remove    # ignore/add/remove/force       | 関数定義での関数名と'('の間に空白を 挿入/削除 する.
sp_func_def_paren_empty                             = ignore    # ignore/add/remove/force       |
sp_inside_fparens                                   = remove    # ignore/add/remove/force       | 引数無し関数の'()'の内側に空白を 挿入/削除 する.
sp_inside_fparen                                    = remove    # ignore/add/remove/force       | 関数の'('と')'の内側に空白を 挿入/削除 する.
sp_inside_tparen                                    = remove    # ignore/add/remove/force       |
sp_after_tparen_close                               = remove    # ignore/add/remove/force       |
sp_square_fparen                                    = ignore    # ignore/add/remove/force   ?   | 関数呼び出しで ']' と '('があれば間に空白を 挿入/削除 する.
sp_fparen_brace                                     = force     # ignore/add/remove/force       | 関数の')'と'{'の間に空白を 挿入/削除 する.
sp_fparen_dbrace                                    = ignore    # ignore/add/remove/force       |
sp_func_call_paren                                  = remove    # ignore/add/remove/force       | 関数呼び出しの関数名と'('の間に空白を 挿入/削除 する.
sp_func_call_paren_empty                            = remove    # ignore/add/remove/force       |
sp_func_call_user_paren                             = remove    # ignore/add/remove/force       |
sp_func_class_paren                                 = remove    # ignore/add/remove/force       | コンストラクタ/デストラクタと'('の間に空白を 挿入/削除 する.
sp_func_class_paren_empty                           = ignore    # ignore/add/remove/force       |
sp_return_paren                                     = force     # ignore/add/remove/force       | 'return' と'('の間に空白を 挿入/削除 する.
sp_attribute_paren                                  = ignore    # ignore/add/remove/force   ?   | '__attribute__' と'('の間に空白を 挿入/削除 する.
sp_defined_paren                                    = force     # ignore/add/remove/force       |
sp_throw_paren                                      = force     # ignore/add/remove/force       |
sp_after_throw                                      = ignore    # ignore/add/remove/force   ?   |
sp_catch_paren                                      = force     # ignore/add/remove/force       |
sp_version_paren                                    = ignore    # ignore/add/remove/force   ?   |
sp_scope_paren                                      = ignore    # ignore/add/remove/force   ?   |
sp_super_paren                                      = remove    # ignore/add/remove/force       |
sp_this_paren                                       = remove    # ignore/add/remove/force       |
sp_macro                                            = force     # ignore/add/remove/force       | マクロと値の間に空白を 挿入/削除 する.
sp_macro_func                                       = force     # ignore/add/remove/force       | マクロ関数の')'と値の間に空白を 挿入/削除 する.
sp_else_brace                                       = force     # ignore/add/remove/force       | 'else'と'{'を同じ行におく場合に、その間の空白を 挿入/削除 する.
sp_brace_else                                       = force     # ignore/add/remove/force       | '}'と'else'を同じ行におく場合に、その間の空白を 挿入/削除 する.
sp_brace_typedef                                    = force     # ignore/add/remove/force       |
sp_catch_brace                                      = force     # ignore/add/remove/force       | 'catch'と'{'を同じ行におく場合に、その間の空白を 挿入/削除 する.
sp_brace_catch                                      = force     # ignore/add/remove/force       | '}'と'catch'を同じ行におく場合に、その間の空白を 挿入/削除 する.
sp_finally_brace                                    = force     # ignore/add/remove/force       | 'finally'と'{'を同じ行におく場合に、その間の空白を 挿入/削除 する.
sp_brace_finally                                    = force     # ignore/add/remove/force       | '}'と'finally'を同じ行におく場合に、その間の空白を 挿入/削除 する.
sp_try_brace                                        = force     # ignore/add/remove/force       | 'try'と'{'を同じ行におく場合に、その間の空白を 挿入/削除 する.
sp_getset_brace                                     = force     # ignore/add/remove/force       | '}'と'try'を同じ行におく場合に、その間の空白を 挿入/削除 する.
sp_word_brace                                       = add       # ignore/add/remove/force       |
sp_word_brace_ns                                    = add       # ignore/add/remove/force       |
sp_before_dc                                        = remove    # ignore/add/remove/force       | '::' の前に空白を 挿入/削除 する.
sp_after_dc                                         = remove    # ignore/add/remove/force       | '::' の後に空白を 挿入/削除 する.
sp_d_array_colon                                    = ignore    # ignore/add/remove/force   ?   | D言語での名前付配列初期化の':'の前後に空白を 挿入/削除 する.
sp_not                                              = remove    # ignore/add/remove/force       |
sp_inv                                              = remove    # ignore/add/remove/force       |
sp_addr                                             = remove    # ignore/add/remove/force       |
sp_member                                           = remove    # ignore/add/remove/force       |
sp_deref                                            = remove    # ignore/add/remove/force       |
sp_sign                                             = remove    # ignore/add/remove/force       |
sp_incdec                                           = remove    # ignore/add/remove/force ---   |
sp_before_nl_cont                                   = add       # ignore/add/remove/force       |
sp_after_oc_scope                                   = ignore    # ignore/add/remove/force       |
sp_after_oc_colon                                   = ignore    # ignore/add/remove/force       |
sp_before_oc_colon                                  = ignore    # ignore/add/remove/force       |
sp_after_oc_dict_colon                              = ignore    # ignore/add/remove/force       |
sp_before_oc_dict_colon                             = ignore    # ignore/add/remove/force       |
sp_after_send_oc_colon                              = ignore    # ignore/add/remove/force       |
sp_before_send_oc_colon                             = ignore    # ignore/add/remove/force       |
sp_after_oc_type                                    = ignore    # ignore/add/remove/force       |
sp_after_oc_return_type                             = ignore    # ignore/add/remove/force       |
sp_after_oc_at_sel                                  = ignore    # ignore/add/remove/force       |
sp_after_oc_at_sel_parens                           = ignore    # ignore/add/remove/force       |
sp_inside_oc_at_sel_parens                          = ignore    # ignore/add/remove/force       |
sp_before_oc_block_caret                            = ignore    # ignore/add/remove/force       |
sp_after_oc_block_caret                             = ignore    # ignore/add/remove/force       |
sp_after_oc_msg_receiver                            = ignore    # ignore/add/remove/force       |
sp_after_oc_property                                = ignore    # ignore/add/remove/force       |
sp_cond_colon                                       = ignore    # ignore/add/remove/force       |
sp_cond_colon_before                                = ignore    # ignore/add/remove/force       |
sp_cond_colon_after                                 = ignore    # ignore/add/remove/force       |
sp_cond_question                                    = ignore    # ignore/add/remove/force       |
sp_cond_question_before                             = ignore    # ignore/add/remove/force       |
sp_cond_question_after                              = ignore    # ignore/add/remove/force       |
sp_cond_ternary_short                               = ignore    # ignore/add/remove/force       |
sp_case_label                                       = ignore    # ignore/add/remove/force       |
sp_range                                            = ignore    # ignore/add/remove/force       |
sp_after_for_colon                                  = ignore    # ignore/add/remove/force       |
sp_before_for_colon                                 = ignore    # ignore/add/remove/force       |
sp_extern_paren                                     = ignore    # ignore/add/remove/force       |
sp_cmt_cpp_start                                    = ignore    # ignore/add/remove/force       |
sp_cmt_cpp_doxygen                                  = false     # false/true                    |
sp_cmt_cpp_qttr                                     = false     # false/true                    |
sp_endif_cmt                                        = ignore    # ignore/add/remove/force       |
sp_after_new                                        = ignore    # ignore/add/remove/force       |
sp_between_new_paren                                = ignore    # ignore/add/remove/force       |
sp_after_newop_paren                                = ignore    # ignore/add/remove/force       |
sp_inside_newop_paren                               = ignore    # ignore/add/remove/force       |
sp_inside_newop_paren_open                          = ignore    # ignore/add/remove/force       |
sp_inside_newop_paren_close                         = ignore    # ignore/add/remove/force       |
sp_before_tr_emb_cmt                                = ignore    # ignore/add/remove/force       |
sp_num_before_tr_emb_cmt                            = 0         # unsigned number               |
sp_annotation_paren                                 = ignore    # ignore/add/remove/force       |
sp_skip_vbrace_tokens                               = false     # false/true                    |
force_tab_after_define                              = false     # false/true                    |
indent_columns                                      = 4         # unsigned number               | インデント文字数 （通常 2,3,4,8のいずれか）
indent_continue                                     = 0         # number                        | '='改行後の位置揃え
indent_param                                        = 0         # unsigned number               |
indent_with_tabs                                    = 0         # unsigned number               | インデントの文字コード 0:空白 1:インデントはタブ/位置あわせは空白 2:タブ
indent_cmt_with_tabs                                = false     # false/true                    | コメント開始をタブ位置に配置するか（整列ではない）
indent_align_string                                 = false     # false/true                    | '\'で連結された文字列のインデント
indent_xml_string                                   = 0         # unsigned number               | 複数行のXMLに対するインデントの文字数（indent_align_string=true）
indent_brace                                        = 0         # unsigned number               | レベルに対しての'{'のインデント文字数
indent_braces                                       = false     # false/true                    | ifやwhile等の本体レベルに'{'を配置する場合. ※ Whitesmithスタイル(VCのSTLヘッダ参照)に使用.
indent_braces_no_func                               = false     # false/true                    | indent_braces=trueの時に、関数の'{'に対してはインデントをやめる.
indent_braces_no_class                              = false     # false/true                    |
indent_braces_no_struct                             = false     # false/true                    |
indent_brace_parent                                 = false     # false/true                    | 例えば'if'なら3桁, 'for'なら4桁、という風に'{'の付く主文の桁数にあわせてインデントするか否か.
indent_paren_open_brace                             = false     # false/true                    |
indent_cs_delegate_brace                            = false     # false/true                    |
indent_namespace                                    = false     # false/true                    | 'namespace'の{本体}をインデントするか否か.
indent_namespace_single_indent                      = false     # false/true                    |
indent_namespace_level                              = 0         # unsigned number               | 'namespace'の{本体}をインデント数 0:デフォルト値  ※indent_namespace=true
indent_namespace_limit                              = 0         # unsigned number               | 'namespace'の{本体}をインデント数最大値           ※indent_namespace=true
indent_extern                                       = true      # false/true                    | 'extern "C"' ボディをインデントするか
indent_class                                        = true      # false/true                    | 'class'の{本体}をインデントするか否か.
indent_class_colon                                  = false     # false/true                    | クラス(コンストラクタ)名に付く':'の後のモノをインデントするか否か.
indent_class_on_colon                               = false     # false/true                    |
indent_constr_colon                                 = false     # false/true                    |
indent_ctor_init_leading                            = 2         # unsigned number               |
indent_ctor_init                                    = 0         # number                        |
indent_else_if                                      = false     # false/true                    |
indent_var_def_blk                                  = 0         # number                        |
indent_var_def_cont                                 = false     # false/true                    |
indent_shift                                        = false     # false/true                    |
indent_func_def_force_col1                          = false     # false/true                    |
indent_func_call_param                              = false     # false/true                    | 関数呼び出しでの引数が複数行になるとき、インデントレベル単位で処理するか(true)、位置あわせ整形で処理するか(false).
indent_func_def_param                               = false     # false/true                    |
indent_func_proto_param                             = false     # false/true                    |
indent_func_class_param                             = false     # false/true                    |
indent_func_ctor_var_param                          = false     # false/true                    |
indent_template_param                               = false     # false/true                    |
indent_func_param_double                            = false     # false/true                    |
indent_func_const                                   = 0         # unsigned number               |
indent_func_throw                                   = 0         # unsigned number               |
indent_member                                       = 0         # unsigned number               | '->''.' に続いてインデントする場合の文字数. 通常は0,1 または indent_columns.
indent_sing_line_comments                           = 0         # unsigned number               | コードの直前にある1行コメント('//')のインデント文字数.
indent_relative_single_line_comments                = false     # false/true                    |
indent_switch_case                                  = 0         # unsigned number               | 'switch'に対する'case'のインデント文字数. 通常は 0 か indent_columns.
indent_switch_pp                                    = true      # false/true                    |
indent_case_shift                                   = 0         # unsigned number               | 'case'の他の行に対する移動量. 通常は 0.
indent_case_brace                                   = 0         # number                        | 'case'に対する'{'のインデント文字数. デフォルトではcaseの'c'の文字の直下に'{'がくる. 通常は 0 か indent_columns.
indent_col1_comment                                 = true      # false/true                    | 行頭からあるコメントをインデントするか否か.
indent_label                                        = 1         # number                        | goto ラベルをどのようにインデントするか. >0 : 1が行頭(左)となる絶対桁数. <=0 : 現在のインデントされた本体から左へずらした位置.
indent_access_spec                                  = 1         # number                        | private: や public: 等のアクセス修飾子をどのようにインデントするか. 値の意味はindent_labelに同じ.
indent_access_spec_body                             = false     # false/true                    |
indent_paren_nl                                     = false     # false/true                    | 丸括弧'('が開いたまま改行する場合、次の行からはその'('の後に並ぶようにインデントする.(非推奨)
indent_paren_close                                  = 0         # unsigned number               | 改行の後の閉括弧')'のインデントの制御方法. 0: 本体レベルでインデント. 1: 開丸括弧'('の下に来るように位置あわせ. 2: 開波括弧'{'レベルでインデント.
indent_paren_after_func_def                         = false     # false/true                    |
indent_paren_after_func_decl                        = false     # false/true                    |
indent_paren_after_func_call                        = false     # false/true                    |
indent_comma_paren                                  = false     # false/true                    | 丸括弧()中の','のインデントの制御方法. Trueが設定されたら、開丸括弧'('の直下に位置あわせする.
indent_bool_paren                                   = false     # false/true                    | 括弧()中の '&&''||' 演算子のインデントの制御方法. Trueが設定されたら、開丸括弧'('の直下に位置あわせする.
indent_first_bool_expr                              = false     # false/true                    |
indent_square_nl                                    = false     # false/true                    | 各括弧'['が開いたまま改行する場合、次の行からはその'['の後に並ぶようにインデントする.(非推奨)
indent_preserve_sql                                 = false     # false/true                    |
indent_align_assign                                 = true      # false/true                    |
indent_oc_block                                     = false     # false/true                    |
indent_oc_block_msg                                 = 0         # unsigned number               |
indent_oc_msg_colon                                 = 0         # number                        |
indent_oc_msg_prioritize_first_colon                = true      # false/true                    |
indent_oc_block_msg_xcode_style                     = false     # false/true                    |
indent_oc_block_msg_from_keyword                    = false     # false/true                    |
indent_oc_block_msg_from_colon                      = false     # false/true                    |
indent_oc_block_msg_from_caret                      = false     # false/true                    |
indent_oc_block_msg_from_brace                      = false     # false/true                    |
indent_min_vbrace_open                              = 0         # unsigned number               |
indent_vbrace_open_on_tabstop                       = false     # false/true                    |
indent_token_after_brace                            = true      # false/true                    |
indent_cpp_lambda_body                              = false     # false/true                    |
indent_using_block                                  = true      # false/true                    |
indent_ternary_operator                             = 0         # unsigned number               |
indent_ignore_asm_block                             = false     # false/true                    |
nl_collapse_empty_body                              = false     # false/true                    | 空の'{''}' ブロックの間に改行を挿入するか否か.
nl_assign_leave_one_liners                          = false     # false/true                    |
nl_class_leave_one_liners                           = false     # false/true                    | class定義内の1行で書かれたメンバー関数の'{''}'をいじらずに済ますか(true)、否か.
nl_enum_leave_one_liners                            = false     # false/true                    |
nl_getset_leave_one_liners                          = false     # false/true                    | １行でかかれた get,set 関数をいじらずに済ますか(true)、否か.
nl_func_leave_one_liners                            = false     # false/true                    |
nl_cpp_lambda_leave_one_liners                      = false     # false/true                    |
nl_if_leave_one_liners                              = false     # false/true                    |
nl_while_leave_one_liners                           = false     # false/true                    |
nl_oc_msg_leave_one_liner                           = false     # false/true                    |
nl_oc_block_brace                                   = ignore    # ignore/add/remove/force       |
nl_start_of_file                                    = ignore    # ignore/add/remove/force       | ファイル先頭に改行を 追加/削除 する.
nl_start_of_file_min                                = 0         # unsigned number               | nl_start_of_fileにaddかforceを設定した場合の、ファイル先頭に挿入する改行の数.
nl_end_of_file                                      = force     # ignore/add/remove/force       | ファイル末に改行を 追加/削除 する.
nl_end_of_file_min                                  = 1         # unsigned number               | nl_end_of_fileにaddかforceを設定した場合の、ファイル末に挿入する改行の数.
nl_assign_brace                                     = ignore    # ignore/add/remove/force       | '='と'{'の間に改行を挿入/削除する
nl_assign_square                                    = ignore    # ignore/add/remove/force       | '='と'['の間に改行を挿入/削除する (D言語用)
nl_after_square_assign                              = ignore    # ignore/add/remove/force       | '= ['の後で改行を 挿入/削除 する. (D言語用)また ']' の直前の改行にも影響する.
nl_func_var_def_blk                                 = 0         # unsigned number               | 関数内の変数定義群の後に置く改行数.
nl_typedef_blk_start                                = 0         # unsigned number               |
nl_typedef_blk_end                                  = 0         # unsigned number               |
nl_typedef_blk_in                                   = 0         # unsigned number               |
nl_var_def_blk_start                                = 0         # unsigned number               |
nl_var_def_blk_end                                  = 0         # unsigned number               |
nl_var_def_blk_in                                   = 0         # unsigned number               |
nl_fcall_brace                                      = force     # ignore/add/remove/force       | list_for_each(item, &list) { }のような関数呼び出しの')'と'{'の間に改行を挿入/削除する
nl_enum_brace                                       = force     # ignore/add/remove/force       | 'enum'と'{'の間に改行を挿入/削除する
nl_enum_class                                       = ignore    # ignore/add/remove/force       |
nl_enum_class_identifier                            = ignore    # ignore/add/remove/force       |
nl_enum_identifier_colon                            = ignore    # ignore/add/remove/force       |
nl_enum_colon_type                                  = ignore    # ignore/add/remove/force       |
nl_struct_brace                                     = force     # ignore/add/remove/force       | 'struct'と'{'の間に改行を挿入/削除する
nl_union_brace                                      = force     # ignore/add/remove/force       | 'union'と'{'の間に改行を挿入/削除する
nl_if_brace                                         = remove    # ignore/add/remove/force       | 'if'と'{'の間に改行を挿入/削除する
nl_brace_else                                       = force     # ignore/add/remove/force       | '}'と'else'の間に改行を挿入/削除する
nl_elseif_brace                                     = remove    # ignore/add/remove/force       | 'else if'と'{'の間に改行を挿入/削除する Ignoreを設定した場合は、かわりにnl_if_braceが使われる.
nl_else_brace                                       = remove    # ignore/add/remove/force       | 'else'と'{'の間に改行を挿入/削除する
nl_else_if                                          = remove    # ignore/add/remove/force       |
nl_before_if_closing_paren                          = ignore    # ignore/add/remove/force       |
nl_brace_finally                                    = force     # ignore/add/remove/force       | '}'と'finally'の間に改行を挿入/削除する
nl_finally_brace                                    = remove    # ignore/add/remove/force       | 'finally'と'{'の間に改行を挿入/削除する
nl_try_brace                                        = remove    # ignore/add/remove/force       | 'try'と'{'の間に改行を挿入/削除する
nl_getset_brace                                     = remove    # ignore/add/remove/force       | 'get', 'set'と'{'の間に改行を挿入/削除する
nl_for_brace                                        = remove    # ignore/add/remove/force       | 'for'と'{'の間に改行を挿入/削除する
nl_catch_brace                                      = remove    # ignore/add/remove/force       | 'catch'と'{'の間に改行を挿入/削除する
nl_brace_catch                                      = force     # ignore/add/remove/force       | '}'と'catch'の間に改行を挿入/削除する
nl_brace_square                                     = ignore    # ignore/add/remove/force       | '}'と']'の間に改行を挿入/削除する
nl_brace_fparen                                     = ignore    # ignore/add/remove/force       |
nl_while_brace                                      = remove    # ignore/add/remove/force       | 'while'と'{'の間に改行を挿入/削除する
nl_scope_brace                                      = force     # ignore/add/remove/force       | 'scope (x)'と'{'の間に改行を挿入/削除する
nl_unittest_brace                                   = force     # ignore/add/remove/force       |
nl_version_brace                                    = force     # ignore/add/remove/force       |
nl_using_brace                                      = force     # ignore/add/remove/force       |
nl_brace_brace                                      = force     # ignore/add/remove/force       |
nl_do_brace                                         = force     # ignore/add/remove/force       | 'do'と'{'の間に改行を挿入/削除する
nl_brace_while                                      = force     # ignore/add/remove/force       | '}'と('d'oと対の)'while'の間に改行を挿入/削除する
nl_switch_brace                                     = force     # ignore/add/remove/force       | 'switch'と'{'の間に改行を挿入/削除する
nl_synchronized_brace                               = ignore    # ignore/add/remove/force       |
nl_multi_line_cond                                  = false     # false/true                    | 2行以上になった条件式の時に改行を挿入/削除する
nl_multi_line_define                                = false     # false/true                    |
nl_before_case                                      = false     # false/true                    | 'case'文の直前に改行を置くか否か.
nl_before_throw                                     = ignore    # ignore/add/remove/force       |
nl_after_case                                       = false     # false/true                    | 'case'文の後に改行を置くか否か.
nl_case_colon_brace                                 = ignore    # ignore/add/remove/force       |
nl_namespace_brace                                  = ignore    # ignore/add/remove/force       | 'namespace'と'{'の間に改行を挿入/削除する
nl_template_class                                   = ignore    # ignore/add/remove/force       | 'template<>'と'class'の間に改行を挿入/削除する
nl_class_brace                                      = ignore    # ignore/add/remove/force       | 'class'と'{'の間に改行を挿入/削除する
nl_class_init_args                                  = ignore    # ignore/add/remove/force       | コンストラクタのメンバー変数初期化リストで','の後に改行を挿入/削除する
nl_constr_init_args                                 = ignore    # ignore/add/remove/force       |
nl_enum_own_lines                                   = ignore    # ignore/add/remove/force       |
nl_func_type_name                                   = ignore    # ignore/add/remove/force       | 関数定義での関数名と返値型名との間に改行を挿入/削除する
nl_func_type_name_class                             = ignore    # ignore/add/remove/force       |
nl_func_class_scope                                 = ignore    # ignore/add/remove/force       |
nl_func_scope_name                                  = ignore    # ignore/add/remove/force       |
nl_func_proto_type_name                             = ignore    # ignore/add/remove/force       |
nl_func_paren                                       = ignore    # ignore/add/remove/force       |
nl_func_paren_empty                                 = ignore    # ignore/add/remove/force       |
nl_func_def_paren                                   = ignore    # ignore/add/remove/force       |
nl_func_def_paren_empty                             = ignore    # ignore/add/remove/force       |
nl_func_call_paren                                  = ignore    # ignore/add/remove/force       |
nl_func_call_paren_empty                            = ignore    # ignore/add/remove/force       |
nl_func_decl_start                                  = ignore    # ignore/add/remove/force       | 関数宣言での'('の後に改行を挿入/削除する
nl_func_def_start                                   = ignore    # ignore/add/remove/force       |
nl_func_decl_start_single                           = ignore    # ignore/add/remove/force       |
nl_func_def_start_single                            = ignore    # ignore/add/remove/force       |
nl_func_decl_start_multi_line                       = false     # false/true                    |
nl_func_def_start_multi_line                        = false     # false/true                    |
nl_func_decl_args                                   = ignore    # ignore/add/remove/force       | 関数宣言での','の後に改行を挿入/削除する
nl_func_def_args                                    = ignore    # ignore/add/remove/force       |
nl_func_decl_args_multi_line                        = false     # false/true                    |
nl_func_def_args_multi_line                         = false     # false/true                    |
nl_func_decl_end                                    = ignore    # ignore/add/remove/force       | 関数宣言での')'の前に改行を挿入/削除する
nl_func_def_end                                     = ignore    # ignore/add/remove/force       |
nl_func_decl_end_single                             = ignore    # ignore/add/remove/force       |
nl_func_def_end_single                              = ignore    # ignore/add/remove/force       |
nl_func_decl_end_multi_line                         = false     # false/true                    |
nl_func_def_end_multi_line                          = false     # false/true                    |
nl_func_decl_empty                                  = ignore    # ignore/add/remove/force       |
nl_func_def_empty                                   = ignore    # ignore/add/remove/force       |
nl_func_call_empty                                  = ignore    # ignore/add/remove/force       |
nl_func_call_start_multi_line                       = false     # false/true                    |
nl_func_call_args_multi_line                        = false     # false/true                    |
nl_func_call_end_multi_line                         = false     # false/true                    |
nl_oc_msg_args                                      = false     # false/true                    |
nl_fdef_brace                                       = ignore    # ignore/add/remove/force       | 関数定義での名前と'{'の間に改行を挿入/削除する
nl_cpp_ldef_brace                                   = ignore    # ignore/add/remove/force       |
nl_return_expr                                      = ignore    # ignore/add/remove/force       |
nl_after_semicolon                                  = false     # false/true                    | for文以外での';'の後に改行を置くか否か.
nl_paren_dbrace_open                                = ignore    # ignore/add/remove/force       |
nl_type_brace_init_lst                              = ignore    # ignore/add/remove/force       |
nl_type_brace_init_lst_open                         = ignore    # ignore/add/remove/force       |
nl_type_brace_init_lst_close                        = ignore    # ignore/add/remove/force       |
nl_after_brace_open                                 = false     # false/true                    | '{'の後に改行を置く. また対応する'}'の前にも改行を置く.
nl_after_brace_open_cmt                             = false     # false/true                    |
nl_after_vbrace_open                                = false     # false/true                    | if,while,do,for文での'{'の付かない本文に対し、仮に'{'があるものとしてその後ろに改行を置く、か、否か.
nl_after_vbrace_open_empty                          = false     # false/true                    |
nl_after_brace_close                                = false     # false/true                    |
nl_after_vbrace_close                               = false     # false/true                    |
nl_brace_struct_var                                 = ignore    # ignore/add/remove/force       |
nl_define_macro                                     = false     # false/true                    | #defineマクロ群の後に改行を置くか否か.
nl_squeeze_ifdef                                    = false     # false/true                    | '#ifxx'や '#elxx'の後や'#endif'の前に空行を置くか否か.
nl_squeeze_ifdef_top_level                          = false     # false/true                    |
nl_before_if                                        = ignore    # ignore/add/remove/force       | 'if'の前に空行を置くか否か.
nl_after_if                                         = ignore    # ignore/add/remove/force       | 'if'の後に空行を置くか否か.
nl_before_for                                       = ignore    # ignore/add/remove/force       | 'for'の前に空行を置くか否か.
nl_after_for                                        = ignore    # ignore/add/remove/force       | 'for'の後に空行を置くか否か.
nl_before_while                                     = ignore    # ignore/add/remove/force       | 'while'の前に空行を置くか否か.
nl_after_while                                      = ignore    # ignore/add/remove/force       | 'while'の後に空行を置くか否か.
nl_before_switch                                    = ignore    # ignore/add/remove/force       | 'switch'の前に空行を置くか否か.
nl_after_switch                                     = ignore    # ignore/add/remove/force       | 'switch'の後に空行を置くか否か.
nl_before_synchronized                              = ignore    # ignore/add/remove/force       |
nl_after_synchronized                               = ignore    # ignore/add/remove/force       |
nl_before_do                                        = ignore    # ignore/add/remove/force       | 'do'の前に空行を置くか否か.
nl_after_do                                         = ignore    # ignore/add/remove/force       | 'do'の後に空行を置くか否か.
nl_ds_struct_enum_cmt                               = false     # false/true                    | 'struct'や'enum'のコメントの開始に空白2文字を置くか否か.
nl_ds_struct_enum_close_brace                       = false     # false/true                    | strcut/union/enum の'}'の前に空白２つを置くか否か.
nl_before_func_class_def                            = 0         # unsigned number               |
nl_before_func_class_proto                          = 0         # unsigned number               |
nl_class_colon                                      = ignore    # ignore/add/remove/force       | クラス(コンストラクタ)名+':'の前後に改行を挿入/削除するpos_class_colon, nl_class_init_args, pos_comma に関係する.
nl_constr_colon                                     = ignore    # ignore/add/remove/force       |
nl_create_if_one_liner                              = false     # false/true                    |
nl_create_for_one_liner                             = false     # false/true                    |
nl_create_while_one_liner                           = false     # false/true                    |
nl_split_if_one_liner                               = false     # false/true                    |
nl_split_for_one_liner                              = false     # false/true                    |
nl_split_while_one_liner                            = false     # false/true                    |
nl_max                                              = 0         # unsigned number               | 連続改行の最大数
nl_max_blank_in_func                                = 0         # unsigned number               |
nl_after_func_proto                                 = 0         # unsigned number               | 別の関数宣言が続くときの、その関数宣言の後の改行数.
nl_after_func_proto_group                           = 0         # unsigned number               | 別の関数宣言が続かないときの、関数宣言の後の改行数.
nl_after_func_class_proto                           = 0         # unsigned number               |
nl_after_func_class_proto_group                     = 0         # unsigned number               |
nl_before_func_body_def                             = 0         # unsigned number               |
nl_before_func_body_proto                           = 0         # unsigned number               |
nl_after_func_body                                  = 0         # unsigned number               | 複数行からなる関数本体の'}'の後の改行数.
nl_after_func_body_class                            = 0         # unsigned number               |
nl_after_func_body_one_liner                        = 0         # unsigned number               | １行ですむ関数本体の'}'の後の改行数.
nl_before_block_comment                             = 0         # unsigned number               | １つの複数行コメントの直前の最小限の改行数. ただし'{'や他の複数行コメントの直後にある場合は適応しない.
nl_before_c_comment                                 = 0         # unsigned number               | １つの1行C(/* */)コメントの直前の最小限の改行数. ただし'{'や他の1行Cコメントの直後にある場合は適応しない.
nl_before_cpp_comment                               = 0         # unsigned number               | １つのC++('//')コメントの直前の最小限の改行数. ただし'{'や他の1行C++コメントの直後にある場合は適応しない.
nl_after_multiline_comment                          = false     # false/true                    |
nl_after_label_colon                                = false     # false/true                    |
nl_after_struct                                     = 0         # unsigned number               |
nl_before_class                                     = 0         # unsigned number               |
nl_after_class                                      = 0         # unsigned number               |
nl_before_access_spec                               = 0         # unsigned number               | 'private:', 'public:', 'protected:', 'signals:', 'slots:' ラベルの前の改行数. ただし'{'の直後の場合は適応しない. 0 なら変更しない.
nl_after_access_spec                                = 0         # unsigned number               | 'private:', 'public:', 'protected:', 'signals:', 'slots:' ラベルの後の改行数. 0 なら変更しない.
nl_comment_func_def                                 = 0         # unsigned number               |
nl_after_try_catch_finally                          = 0         # unsigned number               |
nl_around_cs_property                               = 0         # unsigned number               |
nl_between_get_set                                  = 0         # unsigned number               |
nl_property_brace                                   = ignore    # ignore/add/remove/force       |
eat_blanks_after_open_brace                         = false     # false/true                    | '{'直後の空行削除
eat_blanks_before_close_brace                       = false     # false/true                    | '}'直前の空行削除
nl_remove_extra_newlines                            = 0         # unsigned number               | プリプロセッサ以外の改行をどのぐらい積極的に削除するか 0:変更しない 1:他の設定でハンドルされない改行を可能な限り削除する 2:一度すべて削除し再フォーマット
nl_before_return                                    = false     # false/true                    | 'return'文前の改行挿入
nl_after_return                                     = false     # false/true                    | 'return'文後の改行挿入
nl_after_annotation                                 = ignore    # ignore/add/remove/force       |
nl_between_annotation                               = ignore    # ignore/add/remove/force       |
pos_arith                                           = ignore    # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force   |
pos_assign                                          = ignore    # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force   |
pos_bool                                            = ignore    # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force   | 式を折り返すときにある'&&''||' の位置を 無視/行頭/行末 にする.
pos_compare                                         = ignore    # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force   |
pos_conditional                                     = ignore    # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force   |
pos_comma                                           = ignore    # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force   | 式を折り返すときにある','の位置を 無視/行頭/行末 にする.
pos_enum_comma                                      = ignore    # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force   |
pos_class_comma                                     = ignore    # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force   | コンストラクタの初期化リストでの','の位置を 無視/行頭/行末 にする.
pos_constr_comma                                    = ignore    # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force   |
pos_class_colon                                     = ignore    # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force   | コンストラクタ名と初期化リストの間にある':'の位置を 無視/行頭/行末 にする.
pos_constr_colon                                    = ignore    # ignore/join/lead/lead_break/lead_force/trail/trail_break/trail_force   |
code_width                                          = 0         # unsigned number               | コード幅の桁数を設定する.
ls_for_split_full                                   = false     # false/true                    | 長い'for'文のとき ';' の位置で確実に分割するかどうか.
ls_func_split_full                                  = false     # false/true                    | 長い関数宣言や関数呼び出しのとき ',' の位置で確実に分割するかどうか.
ls_code_width                                       = false     # false/true                    |
align_keep_tabs                                     = false     # false/true                    | インデント付け(段付け)以外のタブを保存するか否か.
align_with_tabs                                     = false     # false/true                    | 整列位置あわせにタブを用いるか否か.
align_on_tabstop                                    = false     # false/true                    | 整列位置あわせで次のタブストップ位置にするかどうか
align_number_right                                  = false     # false/true                    |
align_keep_extra_space                              = false     # false/true                    |
align_func_params                                   = false     # false/true                    | 関数定義やプロトタイプ宣言での引数の変数定義を整えるか否か.
align_func_params_span                              = 0         # unsigned number               |
align_func_params_thresh                            = 0         # unsigned number               |
align_func_params_gap                               = 0         # unsigned number               |
align_same_func_call_params                         = false     # false/true                    |
align_var_def_span                                  = 0         # unsigned number               | 変数定義での位置あわせの桁数.(0だと位置あわせ無し)
align_var_def_star_style                            = 0         # unsigned number               | 変数定義中の'*'をどのように扱うか. 0=型の一部として扱う. 1=変数名の一部として扱う. 2=ぶらさげた状態.
align_var_def_amp_style                             = 0         # unsigned number               | 変数定義中の'＆'をどのように扱うか. 0=型の一部として扱う. 1=変数名の一部として扱う. 2=ぶらさげた状態.
align_var_def_thresh                                = 0         # unsigned number               | 変数定義での位置あわせを行うかどうかの閾値桁数(0=無制限)
align_var_def_gap                                   = 0         # unsigned number               |
align_var_def_colon                                 = false     # false/true                    | 構造体struct中のビットフィールドの':'の位置あわせを行うか否か.
align_var_def_colon_gap                             = 0         # unsigned number               |
align_var_def_attribute                             = false     # false/true                    |
align_var_def_inline                                = false     # false/true                    | struct/enum/union 中の変数定義での位置あわせを行うか否か.
align_assign_span                                   = 0         # unsigned number               | 代入演算での'='の位置あわせを行う場合の桁数(0だと位置あわせ無し)
align_assign_thresh                                 = 0         # unsigned number               | 代入演算での'='の位置あわせを行うかどうかの判定の閾値桁数(0だと無制限)
align_enum_equ_span                                 = 0         # unsigned number               | enum定義での'='の位置あわせを行う場合の桁数(0だと位置あわせ無し)
align_enum_equ_thresh                               = 0         # unsigned number               | enum定義での'='の位置あわせを行うかどうかの判定の閾値桁数(0だと無制限)
align_var_class_span                                = 0         # unsigned number               |
align_var_class_thresh                              = 0         # unsigned number               |
align_var_class_gap                                 = 0         # unsigned number               |
align_var_struct_span                               = 0         # unsigned number               | struct/union 中のメンバー変数宣言の位置あわせを行う場合の桁数(0だと位置あわせ無し)
align_var_struct_thresh                             = 0         # unsigned number               | struct/union 中のメンバー変数宣言の位置あわせを行うかどうかの判定の閾値桁数(0だと無制限)
align_var_struct_gap                                = 0         # unsigned number               |
align_struct_init_span                              = 0         # unsigned number               | 構造体初期化の位置あわせの文字数(0だと位置あわせ無し)
align_typedef_gap                                   = 0         # unsigned number               | typedef での型名と、定義名との間の空白の最小の数.
align_typedef_span                                  = 0         # unsigned number               | 1行で書ける typedef 宣言での位置あわせの桁数.(0だと位置あわせ無し)
align_typedef_func                                  = 0         # unsigned number               | 
align_typedef_star_style                            = 0         # unsigned number               | 
align_typedef_amp_style                             = 0         # unsigned number               | 
align_right_cmt_span                                = 0         # unsigned number               | 行末コメントの位置あわせの桁数.(0だと位置あわせ無し)
align_right_cmt_mix                                 = false     # false/true                    |
align_right_cmt_gap                                 = 0         # unsigned number               |
align_right_cmt_at_col                              = 0         # unsigned number               |
align_func_proto_span                               = 0         # unsigned number               | 関数プロトタイプの位置あわせの桁数.(0だと位置あわせ無し)
align_func_proto_gap                                = 0         # unsigned number               |
align_on_operator                                   = false     # false/true                    |
align_mix_var_proto                                 = false     # false/true                    |
align_single_line_func                              = false     # false/true                    |
align_single_line_brace                             = false     # false/true                    |
align_single_line_brace_gap                         = 0         # unsigned number               |
align_oc_msg_spec_span                              = 0         # unsigned number               |
align_nl_cont                                       = false     # false/true                    | \改行を伴ったマクロ定義での位置あわせをするか否か.
align_pp_define_together                            = false     # false/true                    |
align_pp_define_gap                                 = 0         # unsigned number               | #defineでのラベル名と値との間の最小限の空白の数.
align_pp_define_span                                = 0         # unsigned number               | #define 本体の位置あわせの桁数.(0だと位置あわせ無し)
align_left_shift                                    = true      # false/true                    |
align_asm_colon                                     = false     # false/true                    |
align_oc_msg_colon_span                             = 0         # unsigned number               |
align_oc_msg_colon_first                            = false     # false/true                    |
align_oc_decl_colon                                 = false     # false/true                    |
cmt_width                                           = 0         # unsigned number               | N桁でコメントを折り返すようにする.
cmt_reflow_mode                                     = 0         # unsigned number               |
cmt_convert_tab_to_spaces                           = false     # false/true                    |
cmt_indent_multi                                    = true      # false/true                    |
cmt_c_group                                         = false     # false/true                    | 複数のc(/* */)コメントの連なりを１つのコメントブロックとして扱う否か.
cmt_c_nl_start                                      = false     # false/true                    | 結合したCコメントの1行目として'/*'のみを置くかどうか.
cmt_c_nl_end                                        = false     # false/true                    | 結合したCコメントの最終行として'*/'のみを置くかどうか.
cmt_cpp_group                                       = false     # false/true                    | 複数行のc++(//)コメントの連なりを１つのコメントブロックとして扱うか否か.
cmt_cpp_nl_start                                    = false     # false/true                    | 結合したC++コメントの1行目として'/*'のみを置くかどうか.
cmt_cpp_nl_end                                      = false     # false/true                    | 結合したC++コメントの最終行として'*/'のみを置くかどうか.
cmt_cpp_to_c                                        = false     # false/true                    | C++(//)コメントをC(/* */)コメントに変換するかどうか.
cmt_star_cont                                       = false     # false/true                    | 複数行化して(/*に続く行の)コメントの先頭に'*'を置くかどうか.
cmt_sp_before_star_cont                             = 0         # unsigned number               | cmt_star_contで置いた'*'の前に入れる空白の数.
cmt_sp_after_star_cont                              = 0         # number                        | cmt_star_contで置いた'*'の後に入れる空白の数.
cmt_multi_check_last                                = true      # false/true                    |
cmt_multi_first_len_minimum                         = 4         # unsigned number               |
cmt_insert_file_header                              = ""        # string                        |
cmt_insert_file_footer                              = ""        # string                        |
cmt_insert_func_header                              = ""        # string                        |
cmt_insert_class_header                             = ""        # string                        |
cmt_insert_oc_msg_header                            = ""        # string                        |
cmt_insert_before_preproc                           = false     # false/true                    |
cmt_insert_before_inlines                           = true      # false/true                    |
cmt_insert_before_ctor_dtor                         = false     # false/true                    |
mod_full_brace_do                                   = force     # ignore/add/remove/force       | 単文'do'文に'{}'を追加/削除する
mod_full_brace_for                                  = force     # ignore/add/remove/force       | 単文'for'文に'{}'を追加/削除する
mod_full_brace_function                             = force     # ignore/add/remove/force       | (Pawn言語)単文関数定義に'{}'を追加/削除する
mod_full_brace_if                                   = force     # ignore/add/remove/force       | 単文'if'文に'{}'を追加/削除する
mod_full_brace_if_chain                             = false     # false/true                    | 単文'if'/'else-if'/'else'文に'{}'を追加/削除する
mod_full_brace_if_chain_only                        = false     # false/true                    |
mod_full_brace_nl                                   = 0         # unsigned number               | mod_full_brace_xxxでremov指定時'{}'内行数が指定数より少ない場合に限りremoveを実施する
mod_full_brace_nl_block_rem_mlcond                  = false     # false/true                    |
mod_full_brace_while                                = force     # ignore/add/remove/force       | 単文'while'文に'{}'を追加/削除する
mod_full_brace_using                                = force     # ignore/add/remove/force       | 単文'using'文に'{}'を追加/削除する
mod_paren_on_return                                 = force     # ignore/add/remove/force       | 'return'文に'()'を追加/削除する
mod_pawn_semicolon                                  = false     # false/true                    | (Pawn言語)オプションのセミコロンを実際のセミコロン（';'）に変更するかどうか
mod_full_paren_if_bool                              = true      # false/true                    | 'while'/'if'文の'&&'/'||'で区切られた式に'()'を追加/削除する
mod_remove_extra_semicolon                          = true      # false/true                    | 余分な';'を取り除くかどうか
mod_add_long_function_closebrace_comment            = 0         # unsigned number               | 関数の'{}'内が指定行以上の場合'}'後に関数名のコメントを挿入する（0は挿入しない）
mod_add_long_namespace_closebrace_comment           = 0         # unsigned number               |
mod_add_long_class_closebrace_comment               = 0         # unsigned number               |
mod_add_long_switch_closebrace_comment              = 0         # unsigned number               |
mod_add_long_ifdef_endif_comment                    = 0         # unsigned number               |
mod_add_long_ifdef_else_comment                     = 0         # unsigned number               |
mod_sort_import                                     = false     # false/true                    |
mod_sort_using                                      = false     # false/true                    |
mod_sort_include                                    = false     # false/true                    |
mod_move_case_break                                 = false     # false/true                    |
mod_case_brace                                      = ignore    # ignore/add/remove/force       |
mod_remove_empty_return                             = false     # false/true                    |
mod_sort_oc_properties                              = false     # false/true                    |
mod_sort_oc_property_class_weight                   = 0         # number                        |
mod_sort_oc_property_thread_safe_weight             = 0         # number                        |
mod_sort_oc_property_readwrite_weight               = 0         # number                        |
mod_sort_oc_property_reference_weight               = 0         # number                        |
mod_sort_oc_property_getter_weight                  = 0         # number                        |
mod_sort_oc_property_setter_weight                  = 0         # number                        |
mod_sort_oc_property_nullability_weight             = 0         # number                        |
pp_indent                                           = ignore    # ignore/add/remove/force       | プリプロセッサ命令に対してインデントを 追加/削除 する.
pp_indent_at_level                                  = false     # false/true                    |
pp_indent_count                                     = 1         # unsigned number               |
pp_space                                            = ignore    # ignore/add/remove/force       | #とプリプロセッサ命令との間に空白を 挿入/削除 する.
pp_space_count                                      = 0         # unsigned number               |
pp_indent_region                                    = 0         # unsigned number               |
pp_region_indent_code                               = false     # false/true                    |
pp_indent_if                                        = 0         # unsigned number               |
pp_if_indent_code                                   = false     # false/true                    |
pp_define_at_level                                  = false     # false/true                    |
pp_ignore_define_body                               = false     # false/true                    |
pp_indent_case                                      = true      # false/true                    |
pp_indent_func_def                                  = true      # false/true                    |
pp_indent_extern                                    = true      # false/true                    |
pp_indent_brace                                     = true      # false/true                    |
include_category_0                                  = ""        # string                        |
include_category_1                                  = ""        # string                        |
include_category_2                                  = ""        # string                        |
use_indent_func_call_param                          = true      # false/true                    |
use_indent_continue_only_once                       = false     # false/true                    |
use_options_overriding_for_qt_macros                = true      # false/true                    |
warn_level_tabs_found_in_verbatim_string_literals   = 2         # unsigned number               |
